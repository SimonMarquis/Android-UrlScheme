import com.android.builder.core.BuilderConstants

apply plugin: 'com.android.library'

def libVersionMajor = 1
def libVersionMinor = 0
def libVersionPatch = 0
def libVersionSnapshot = false
def libVersionName = "${libVersionMajor}.${libVersionMinor}.${libVersionPatch}${libVersionSnapshot ? '-SNAPSHOT' : ''}"

def libGroupId = 'fr.smarquis.usi'
def libArtifactId = 'usi'
def libLocalRepository = "${buildDir}/maven/${libVersionName}"
def libLocalArtifact = "${buildDir}/artifact/"

android {
    resourcePrefix 'usi_'

    compileSdkVersion 33

    defaultConfig {
        minSdkVersion 11
        targetSdkVersion 33

        versionName libVersionName

        buildConfigField "int", "VERSION_MAJOR", "$libVersionMajor"
        buildConfigField "int", "VERSION_MINOR", "$libVersionMinor"
        buildConfigField "int", "VERSION_PATCH", "$libVersionPatch"
        buildConfigField "boolean", "VERSION_SNAPSHOT", "$libVersionSnapshot"

        consumerProguardFiles 'consumer-proguard-rules.pro'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
}

dependencies {
    implementation 'androidx.annotation:annotation:1.5.0'
}

/*
android.variantFilter { variant ->
    if (variant.buildType.name.equals(BuilderConstants.DEBUG)) {
        variant.setIgnore(true);
    }
}
*/

/*
android.libraryVariants.all { variant ->
    variant.outputs.each { output ->
        def outputFile = output.outputFile
        if (outputFile != null && outputFile.name.endsWith('.aar')) {
            def file = output.outputFile
            output.outputFile = new File(file.parent as File, file.name.replace("-release.aar", "-${libVersionName}.aar"))
        }
    }
}

apply plugin: 'maven'

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath += files(ext.androidJar)
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

uploadArchives {
    repositories.mavenDeployer {
        pom.groupId = libGroupId
        pom.artifactId = libArtifactId
        pom.version = libVersionName
        repository(url: "file://${libLocalRepository}")

        pom.project {
            name 'Android-UrlSchemeInterceptor'
            description 'Intercept and debug url scheme on Android'
            packaging 'aar'
            url 'https://simonmarquis.github.io/Android-UrlSchemeInterceptor/'

            scm {
                url 'https://github.com/SimonMarquis/Android-UrlSchemeInterceptor'
                connection 'scm:git@github.com:SimonMarquis/Android-UrlSchemeInterceptor.git'
                developerConnection 'scm:git@github.com:SimonMarquis/Android-UrlSchemeInterceptor.git'
            }

            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }

            developers {
                developer {
                    id 'SimonMarquis'
                    name 'Simon Marquis'
                }
            }
        }
    }
}

task zipRelease(type: Zip) {
    from libLocalRepository
    destinationDir file(libLocalArtifact)
    archiveName "${libArtifactId}-${libVersionName}.zip"
}

task generateRelease << {
    println "Release ${libVersionName} can be found at ${libLocalRepository}/"
    println "Release ${libVersionName} zipped can be found ${libLocalArtifact}/${libArtifactId}-${libVersionName}.zip"
}

generateRelease.dependsOn(uploadArchives)
generateRelease.dependsOn(zipRelease)

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}
*/
